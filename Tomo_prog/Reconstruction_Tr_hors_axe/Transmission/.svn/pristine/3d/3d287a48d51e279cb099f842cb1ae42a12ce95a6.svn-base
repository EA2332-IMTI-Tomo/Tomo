## -*- makefile -*- 

GPU_SUPPORT = CUDA
#GPU_SUPPORT = SOFT
RELEASE_MODE = DEBUG_MODE
#RELEASE_MODE = FINAL

CC = nvcc
#CC = g++


DEBUG = -g
#DEBUG = -g -pg
OPTIMIZE =
#-O3 $(MED_OPT) $(HARD_OPT) $(HYST_OPT) $(FINAL_OPT)


# FFTW toujours nécessaire... en 2D
#
# si monocore
#FFTW = -lfftw3
# si multicore
FFTW_LIBS = -lfftw3_threads -lfftw3 -lfftw3f_threads -lfftw3f -lm -lpthread 
BOOST_LIBS = -lboost_system -lboost_chrono -lboost_thread
OPENCV_LIBS = -lopencv_core -lopencv_highgui -lopencv_imgproc


COMMONFLAGS = -D$(GPU_SUPPORT) -D$(RELEASE_MODE) $(DEBUG) $(OPTIMIZE) $(INCL)
# openMP encore nécessaire côté CPU pour le traitement des hologrames
SOFTFLAGS =   
#-ansi : unsupported  -Wall -fopenmp
#-msse
# pour empêcher conversion silencieuse de double vers float

CUDAFLAGS =  -arch=sm_20 -Xcompiler -fopenmp  -I /usr/local/phd/include
#--gpu-name sm_13
# --compiler-options -fpermissive // un peu brutos encore
#-use_fast_math -Xcompiler -D__builtin_stdarg_start=__builtin_va_start
NVCCFLAGS = $(COMMONFLAGS) $(CUDAFLAGS) -I /home/bailleul/ProjetTOMO/Fourier/CUFFT/
CFLAGS = $(COMMONFLAGS) $(SOFTFLAGS) 


CUDA_LINK = -lcufft -lcuda 
TOMO_LINK = $(FFTW_LIBS) $(BOOST_LIBS) $(OPENCV_LIBS) -lAIRVOL -lvectra  -lmsleep $(CUDA_LINK) -Xcompiler -fopenmp
#unsupported -fopenmp


SOURCES = main.cc util.cc util_Image.cc Holo_Process.cc Compute.cc cuda_Compute.cu cu_Holo_Process_kernels.cu
#EXT_SOURCES = ../Fourier/CUFFT/cu_Volume_kernels.cu ../Fourier/CUFFT/cuFFT_Volume_kernels.cu

OWN_OBJS = main.o util.o util_Image.o Compute.o cuda_Compute.o Holo_Process.o cu_Holo_Process_kernels.o 
#EXT_OBJS = cu_Volume_kernels.o cuFFT_Volume_kernels.o

#$(SOURCES:.cc=.o:.cu=.o)

OBJS = $(OWN_OBJS) $(EXT_OBJS)

#EXE = tomoTrans_soft
EXE = tomoTrans_CUDA


#*******************************************************************************
# main section        -------------
#*******************************************************************************



.PHONY:all print display pdf clean remake tags


all: $(OWN_OBJS) $(EXE)

$(EXE): $(OBJS) *.h 
	$(CC) $(OBJS) -o $@ $(TOMO_LINK)

#$^: toutes les dépendances
#$<: la première seulement


%.o: %.cc
	$(CC) -c $(NVCCFLAGS)  -o $@ $< 

%.o: %.cu
	$(CC) -c $(NVCCFLAGS)  -o $@ $< 

cu_Volume_kernels.o: ../Fourier/CUFFT/cu_Volume_kernels.cu
	$(CC) -c $(NVCCFLAGS)  -o $@ $< 

cuFFT_Volume_kernels.o: ../Fourier/CUFFT/cuFFT_Volume_kernels.cu
	$(CC) -c $(NVCCFLAGS)  -o $@ $< 



#FFTW_Image.o: ../Fourier/include/FFTW_Image.cc
#	$(CC) -c $(CFLAGS)  -o $@ $< 


#cuFourier.o: cuFourier.cu *.h
#	$(CC) $(CFLAGS) -c cuFourier.cu 




# Code printout/display
print:	
	a2ps -2  \
		main.h main.cc \
		-o Code.ps
	gzip Code.ps

display: Code.ps.gz
	gv Code.ps.gz &	

pdf: 	print
	gunzip Code.ps.gz
	ps2pdf Code.ps Code.pdf
# -dCompatibilityLevel=1.3 -dSubsetFonts=true -dEmbedAllFonts=true -sPAPERSIZE=letter
	gzip Code.ps

# Cleaning
clean:
	rm -f *~ $(OBJS) $(EXE) Code.ps*

cleanobj:
	rm -f *~ $(OBJS) 

# Extra Functionalities
remake:
	make clean; make

tags:
	@etags  *.cc *.cu  *.h	


.PHONY:all print display pdf clean remake tags
