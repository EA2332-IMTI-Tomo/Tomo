#include <stdio.h>
#include <stdlib.h>

#include <iostream>
#include <string>
#include <fstream.h>


#include <macros.h>
#include <PCA.h>

/* use this file to parametrize data type */
// #include "current_type.h"





/*******************************************************************************
 Main Test
*******************************************************************************/

static void
usage(int argc, char **argv)
{
  if (argc != 4)
    {
      printf("WARNING: can only manage TYPE files unless recompiled \n");
      printf("Usage: %s <instances number> <instances dimension>  <training set txt file> \n", argv[0]);
      exit(1);
    }  
}


int 
main(int argc, char *argv[])
{
  usage(argc, argv);

  int nb_instances = atoi(argv[1]);
  int nb_comps = atoi(argv[2]);

  

  //   double tset[3][12] = {{0.500,   2.500,   1.500,   4.000,   3.000,   4.000,   3.750,   2.500,   4.000,   0.250,   3.250,   0.800},
  // 			{0.400,   2.350,   1.800,   4.120,   3.200,   3.680,   3.640,   2.370,   3.820,   0.380,   3.300,   0.750},
  // 			{0.550,   2.540,   1.400,   3.800,   3.150,   4.200,   3.890,   2.640,   4.230,   0.210,   3.100,   0.900}};
  double** tset;
  MATRIX_ALLOC(tset, nb_instances, nb_comps, double);
  MATRIX_FILE_TXT(tset, nb_instances, nb_comps, argv[3], "lf");


  PCA<double> X;
  
  
  X.set_instances_num(nb_instances);
  X.set_dimension(nb_comps);


  //use either method
  X.set_training_data(argv[3]);

  int i,j;
  double** M = X.get_training_data();
  for (i = 0; i < 3; i++)
    for (j = 0; j < 12; j++)
      if (!(M[i][j] == 
	    tset[i][j]))
	{cout << "casse!"; exit(1);}
  cout << "ok!" << endl;

  X.set_training_data(tset);
  
  //debug
  X.compute_data_covar_matrix();

  X.perform_covar_pca();
  

  cout << X << endl ;
  //  X.normalize_values();
  //cout << X << endl ;
  
  return EXIT_SUCCESS;
}



/*
  pca.txt:

  6 pts 2d : dim = 12
  S1: 0.5000    2.5000    1.5000    4.0000    3.0000    4.0000    3.7500    2.5000    4.0000    0.2500    3.2500    0.8000
  S2: 0.4000    2.3500    1.8000    4.1200    3.2000    3.6800    3.6400    2.3700    3.8200    0.3800    3.3000    0.7500
  S3: 0.5500    2.5400    1.4000    3.8000    3.1500    4.2000    3.8900    2.6400    4.2300    0.2100    3.1000    0.9000


  #Eigenvalues (descending order):
  0.497 (93.5265 %) | 0.0344 (6.47346 %) | -5.68123e-17 (-1.06911e-14 %) | 2.65129e-17 (4.98925e-15 %) | -2.27568e-17 (-4.28242e-15 %) | -1.36729e-17 (-2.57299e-15 %) | 1.32915e-17 (2.50123e-15 %) | 9.2516e-18 (1.74099e-15 %) | 3.02118e-18 (5.68532e-16 %) | 5.72594e-18 (1.07752e-15 %) | -3.13049e-18 (-5.89103e-16 %) | -5.3138e-18 (-9.99961e-16 %) | 
  #Eigenvectors (corresponding):
  vector 0: 0.152199 0.194812 -0.408759 -0.316588 -0.0652045 0.525309 0.248745 0.269617 0.407908 -0.17394 -0.195697 0.147858 
  vector 1: 0.0668739 0.187137 -0.324659 0.267057 -0.753936 0.114766 -0.137303 -0.0991203 -0.226932 -0.148955 0.276657 -0.152619 
  vector 2: -0.0962197 0.158109 0.143957 0.194046 0.0546007 0.501274 -0.464241 -0.107705 -0.24044 0.120604 -0.592223 -0.0538899 
  vector 3: 0.0570183 0.174758 0.152175 -0.115193 0.0376007 0.294079 -0.347383 -0.087444 0.302784 0.545179 0.552742 0.138357 
  vector 4: -0.0217355 -0.0220728 0.179911 0.0889075 -0.210652 -0.0136899 0.0735712 -0.0370729 -0.156839 -0.0632734 -0.0458484 0.936331 
  vector 5: -0.269901 -0.201125 0.470087 -0.0527908 0.00623323 0.534239 0.292413 -0.0941189 -0.132352 -0.37861 0.317709 -0.146005 
  vector 6: -0.0915419 0.16454 0.315775 0.53719 -0.0861869 -0.12387 -0.125329 0.19586 0.642747 -0.287116 -0.0554711 -0.0279832 
  vector 7: -0.0373491 -0.409477 -0.138648 0.518382 -0.0400632 0.211346 0.385928 0.286397 -0.0169447 0.513458 -0.0325525 -0.0277439 
  vector 8: 0.28824 -0.39473 0.347547 -0.309581 -0.520645 -0.0505381 0.0346747 -0.228095 0.273426 0.176472 -0.309158 -0.127038 
  vector 9: -0.587135 -0.00665156 0.095749 -0.33696 -0.29044 -0.123969 -0.175806 0.613445 -0.0783298 0.129488 -0.0375774 -0.0354512 
  vector 10: -0.330085 -0.615639 -0.411606 0.00797084 0.0725883 0.0590363 -0.399205 -0.238078 0.241917 -0.201801 0.0540511 0.124822 
  vector 11: 0.58309 -0.317708 0.109401 0.00996213 0.0937646 0.0781253 -0.368834 0.531596 -0.194106 -0.231809 0.14772 0.0154001 


  ----------------------------------------
  Matlab:

  sx1 = [ 0.50 1.50 3.00 3.75 4.00 3.25 ]; 
  sy1 = [ 2.50 4.00 4.00 2.50 0.25 0.80 ];

  sx2 = [ 0.40 1.80 3.20 3.64 3.82 3.30 ]; 
  sy2 = [ 2.35 4.12 3.68 2.37 0.38 0.75 ];

  sx3 = [ 0.55 1.40 3.15 3.89 4.23 3.10 ]; 
  sy3 = [ 2.54 3.80 4.20 2.64 0.21 0.90 ];



  eigenvalues =

  -0.0000         0         0         0         0         0         0         0         0         0         0         0
  0   -0.0000         0         0         0         0         0         0         0         0         0         0
  0         0   -0.0000         0         0         0         0         0         0         0         0         0
  0         0         0   -0.0000         0         0         0         0         0         0         0         0
  0         0         0         0   -0.0000         0         0         0         0         0         0         0
  0         0         0         0         0    0.0000         0         0         0         0         0         0
  0         0         0         0         0         0    0.0000         0         0         0         0         0
  0         0         0         0         0         0         0    0.0000         0         0         0         0
  0         0         0         0         0         0         0         0    0.0000         0         0         0
  0         0         0         0         0         0         0         0         0    0.0000         0         0
  0         0         0         0         0         0         0         0         0         0    0.0172         0
  0         0         0         0         0         0         0         0         0         0         0    0.2485

  ie: 0.2485 0.0172 0 0 ...
  normalise: (0.9352653 0.06473466 0 0...): identique! 


  eigenvectors =

  -0.0087    0.0596   -0.0933    0.6441    0.0650   -0.0261   -0.5819   -0.3142   -0.0217    0.3202   -0.0669    0.1522
  -0.0440   -0.0475   -0.0545    0.0519   -0.8113    0.3413   -0.1056    0.3412   -0.0875    0.0851   -0.1871    0.1948
  0.0177   -0.1263    0.2398   -0.3102   -0.2125    0.3291   -0.4113   -0.3935    0.2754   -0.0650    0.3247   -0.4088
  -0.1920   -0.2706    0.0501    0.1081    0.3920    0.5158   -0.1621    0.2665   -0.4018   -0.1606   -0.2671   -0.3166
  -0.1457    0.0588    0.1673    0.1464   -0.0409    0.0111    0.1298    0.1820   -0.4452    0.3213    0.7539   -0.0652
  -0.4296   -0.2320    0.4461   -0.3305    0.1791    0.0299   -0.0907   -0.0224    0.0904    0.3381   -0.1148    0.5253
  0.1362    0.1910   -0.5381   -0.5275    0.1540    0.0366   -0.4319    0.0878   -0.2752    0.0373    0.1373    0.2487
  0.2767    0.0564    0.5038    0.0757   -0.0215   -0.2296   -0.3407    0.1828   -0.1895   -0.5828    0.0991    0.2696
  0.2947    0.1988   -0.0003    0.1669    0.2320    0.6517    0.2198   -0.0005    0.3061   -0.0857    0.2269    0.4079
  -0.0396   -0.0331   -0.0489    0.0709    0.1528   -0.1447   -0.2756    0.6886    0.5705    0.1327    0.1490   -0.1739
  0.6336    0.1738    0.3524   -0.1583    0.0601    0.0281    0.0024    0.0978   -0.1309    0.5227   -0.2767   -0.1957
  0.4123   -0.8586   -0.1771    0.0442   -0.0012   -0.0838    0.0539   -0.0236   -0.0167    0.0592    0.1526    0.1479


  Statlib normalized first eigenvector:
  (0.19357349 0.24777061 -0.519878 -0.40265077 -0.08293 0.6681115 0.316365
  0.34291095 0.5187956 -0.22122467 -0.24889618 0.1880524)
  12:
  (1.2770199 -0.6958092 0.23959808 0.021817965 0.20535296 0.17110147 -0.8077798
  1.1642433 -0.42510968 -0.5076827 0.32352015 0.03372761)
  2:
  (-0.071827605 -0.20099923 0.3487082 -0.28683934 0.80978405 -0.12326734
  0.14747377 0.106462665 0.24374208 0.1599889 -0.29715046 0.1639243)


  Matlab: line1
  (-0.06780981 0.4645362 -0.7272018 5.0202646 0.50662506 -0.20342945 -4.5354633
  -2.4489477 -0.16913483 2.495713 -0.52143407 1.186282)
  line12:
  (-1.417325 2.9515288 0.60880005 -0.1519422 0.0041251276 0.2880714 -0.18528697
  0.08112751 0.05740802 -0.20350628 -0.5245787 -0.50842196)

  Matlab: col1
  (-0.00954366 -0.048266783 0.01941641 -0.21061869 -0.15982887 -0.47125933
  0.14940763 0.30353224 0.32327774 -0.043440104 0.69504166 0.45228168)
  Matlab: col12
  (0.19358942 0.24777411 -0.51996946 -0.40269652 -0.08293056 0.66815066 0.3163317
  0.3429153 0.51882476 -0.22119053 -0.24891886 0.18812008)
  Matlab: col11
  (-0.071865946 -0.20098831 0.34880227 -0.28692666 0.8098615 -0.123321526
  0.1474917 0.10645613 0.24374263 0.16006018 -0.29723924 0.1639274)

  OK!! il faut regarder en colonnes et a l'envers!!
  col12: 1st eigenvec, correspond
  col11: 2nd eigenvec: correspond
  apres, ca ne va plus, mais de toute facons ils sont insignifiants

  Matlab/PCA/asm.m: modifie afin de faire apparaitre eigenvals/vec dans le bon ordre:
  les composantes des vecteurs propres sont identiques au signe pres, sans normalisation!!!
  
  les valeurs propres normalisees sont identiques, mais ce n'est pas
  possible. Seul matlab a les bonnes (cf def eigenval/vec).

  La matrice de covariance est en cause.
*/




